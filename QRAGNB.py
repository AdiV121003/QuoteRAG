# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-byVNWTlhx1BmlJKmE0Vl1XmQ7F44lo1
"""

pip install langchain
pip install langchain-openai
pip install langchain-community
pip install jq
pip install pymupdf

pip install langchain-chroma

pip install sentence-transformers scikit-learn

from sentence_transformers import SentenceTransformer

# Load the model
model = SentenceTransformer('all-MiniLM-L6-v2')

from datasets import load_dataset

ds = load_dataset("Abirate/english_quotes")

quotes = ds['train']['quote']
print(quotes)

author = ds['train']['author']
print(author)

tags = ds['train']['tags']
print(tags)

from tqdm import tqdm

embeddings = []

for quote in tqdm(quotes):
    emb = model.encode(quote)
    embeddings.append(emb)

import json
import numpy as np

data = []

for i in range(len(quotes)):
    data.append({
        "quote": quotes[i],
        "author": author[i],
        "tags": tags[i],
        "embedding": embeddings[i].tolist()  # convert numpy array to list
    })

with open("quotes_with_embeddings.json", "w") as f:
    json.dump(data, f)

from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

def retrieve_quotes(query, embeddings, data, top_k=1):
    query_embedding = model.encode(query)
    similarities = cosine_similarity([query_embedding], embeddings)
    indices = np.argsort(similarities[0])[::-1][:top_k]

    results = []
    for idx in indices:
        results.append({
            "quote": data[idx]["quote"],
            "author": data[idx]["author"],
            "tags": data[idx]["tags"],
            "score": similarities[0][idx]
        })
    return results

# Load stored data
with open("quotes_with_embeddings.json", "r") as f:
    data = json.load(f)

# Prepare numpy array of embeddings
embeddings = np.array([entry["embedding"] for entry in data])

# Search for quotes related to "life advice"
results = retrieve_quotes("life advice", embeddings, data, top_k=3)

for result in results:
    print(f"\"{result['quote']}\" — {result['author']} (score: {result['score']:.4f})")

import openai
from openai import OpenAI
import os
from google.colab import userdata

# Fetch the API key from Colab's Secrets Manager
openai.api_key = userdata.get("OPENAI_API_KEY")
client = OpenAI(api_key=openai.api_key)

def recommend_quotes(user_query, embeddings, data, top_k=5):
    retrieved = retrieve_quotes(user_query, embeddings, data, top_k=top_k)

    # Build context for GPT
    context = "Here are some quotes related to the user’s request:\n\n"
    for i, r in enumerate(retrieved, 1):
        context += f"{i}. \"{r['quote']}\" — {r['author']}\n"

    prompt = f"""
    The user asked: "{user_query}"

    {context}

    From the quotes above, recommend the ones that best match the user’s request.
    Explain briefly why they fit, and suggest the top 2–3 as social media captions.
    """

    response = client.chat.completions.create(
        model="gpt-4o-mini",  # or "gpt-4o" if you want
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )

    return response.choices[0].message.content

user_query = "I want something uplifting about never giving up"
print(recommend_quotes(user_query, embeddings, data, top_k=3)) # Pass embeddings and data

